Attendance System
^^^^^^^^^^^^^^^^^

The attendanceSystem module now support attendance sytem compatible with the ZKTeco communication protocol.


Architecture
-------------

This is composed of several tables: 
  - attendance_system: store the attendance system configured in dolibarr
  - attendance_system_user: store the user register in the attendance system, you should have one entry per dolibarr user and type of attendance system
  - attendance_system_user_link:  store the link between the attendance_system_user and the attendance_system
  - attendance_system_event: store the events retreived from the attendance system

it does reuse the table from the attendance feature
  -  attendance_event: store the event with the dol user, in/out ...

Configuration
-------------

Activate the fonction in the module configuration:

Home > Setup > Modules > Timesheet > AttendanceSystem


Setup attendance system
-----------------------

the new attendance system neeed to be set up in the attendanceSystem menu by clicking on `NewAttendanceSystem`

http(s)://<dolDomain>/(custom/)attendanceSystem/AttendanceSystemList.php

Import the user
===============

Once the attendance system is entered in dolibarr, the user could be retrieved by clicking on `getUser`

http(s)://<dolDomain>/(custom/)attendanceSystem/AttendanceSystemCard.php

By default the module will try to map automatically the attendance_system_user with the dolibarr Users by checking if:
  - the employe login = attendance_system_user name
  - the employe login = attendance_system_user uid
  - the employe ref_int = attendance_system_user uid
  - the employe email = attendance_system_user email
  - the employe firstname.lastname = attendance_system_user name

  this logic is part of the *create* function of the *AttendanceSystemUser* class


Mapping the user
================

In case the automatic mapping doesn't work a manual mapping is possible by modifying the AttendanceSystemUser entry


Import attendance events
------------------------

function *parseSystemEvent* in *AttendanceSystemEvent* class

fetching the time
=================

Once the attendance system is entered in dolibarr, the user imported, the attendance could be fetched by clicking on `GetAttendance`

http(s)://<dolDomain>/(custom/)attendanceSystem/AttendanceSystemCard.php

function *loadAttendanceUserEventFromArray* and *getAttendance* in *AttendanceSystem* class

Process the time
================

Once the attendance are fetched, they could be processed, this step is separated from fetching because fetching works per attendance sytem when the user might have attendance on different system, the attendance can be processed by clicking on `ProcessEvent`

http(s)://<dolDomain>/(custom/)attendanceSystem/AttendanceSystemEven.php

First the system fetch all the attendances event which are not `Access` and group them per dolibarr user (dolibarr user is found on the attendance_system_user table) and order by date, older date first

function *fetchUnlinkedSystemEvent* in *AttendanceSystemEvent* class

Grouping attendance events
**************************

function *splitByDay* in *AttendanceSystemEvent* class

Then for each dolibarr user, the attendance are grouped by day, the day might not be actual days but it should group properly in and out event. the reason the event are grouped in days is to avoid error propagation generated by a missed or double attendance event (employee forget to log in or out, or double logging)

Grouping attendance events Steps
  #. Save the date of the first event found
  #. Look for the next attendance
  #. the grouping logic follow those rulesThe next attendance must be

      - Be closer to the previous attendance event than the `ATTENDANCE_MIN_OVERDAY_BREAK`

      - Be before the date of the previous attendance event 00:00 plus the `ATTENDANCE_MAX_DAY_SPAN`

Parsing Attendandance System Events
***********************************

function *parseDaySystemEvent* in *AttendanceSystemEvent* class

Once grouped per day and dolibarr user, the sytem will try to find out the in and out event

[in/out] steps are only if there is one attendance system for the `in`event and another one for the `out` events, NOT [in/out] steps are used if there is no such `in` and `out` attendance system

*nbrDayEvent* is the number of event of the day which don't have an **error** status

Parsing Attendandance System Events steps:
  #. Fetch the first/next event (`in`)
  #. [in/out]: if this event is not an `in` event then put its status as **error** and restart from step : Fetch the first/next event (`in`)
  #. NOT [in/out]: if *nbrEvent* is odd and there is event before, if the duration between those event is **smaller** than `minSecondsPerEvent` then put the  event as **error** and restart from step : Fetch the first/next event (`in`)
  #. Fetch the next  event (`out`)
  #. [in/out]: if this event is an `in` event then put the first `in` as **error** and restart from step : Fetch the next  event (`out`) 
  #. If the duration between `in`and `out` events is **bigger** than `maxHoursPerEvent` or **smaller** than `minSecondsPerEvent`then put the `in` and `out`event as **error**
  #. Create a pair of attendance event using the *project* and *task* from the in event
  #. restart from step 1 until there is no day events left
 
Add time on task
================

if order to add time spent a task need to be specified, because the relationship of the task with the project is required. 